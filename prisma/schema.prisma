// хуй

// Это ваш файл схемы Prisma - основной конфигурационный файл для описания структуры базы данных
// Узнайте больше в документации: https://pris.ly/d/prisma-schema

// Блок генератора клиента - настройка генерации кода для работы с БД
generator client {
  provider = "prisma-client-js"  // Генерирует JavaScript/TypeScript клиент для Prisma
}

// Блок источника данных - настройка подключения к базе данных
datasource db {
  provider = "sqlite"           // Используем SQLite как систему управления базами данных
  url      = env("DATABASE_URL") // URL базы данных берется из переменной окружения DATABASE_URL
}

// ==================== ОСНОВНЫЕ МОДЕЛИ ДЛЯ MVP ====================

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  firstName     String
  passwordHash  String
  phone         String?
  
  // Связи
  addresses     Address[]
  chefProfile   Chef?
  orders        Order[]
  cartItems     CartItem[]
  sessions      UserSession[]
  reviews     Review[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  addressLine1 String
  city         String
  country      String   @default("Russia")
  isPrimary    Boolean  @default(false)
  
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())

  @@map("user_addresses")
}

model Chef {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  businessName String
  description  String?
  isActive     Boolean   @default(true)
  isVerified   Boolean   @default(false)
  
  user         User      @relation(fields: [userId], references: [id])
  products     Product[]
  orders       Order[]
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  promotions  Promotion[]
  reviews     Review[]

  @@map("chefs")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  isActive    Boolean   @default(true)
  
  products    Product[]
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())

  @@map("categories")
}

model Product {
  id           Int       @id @default(autoincrement())
  chefId       Int
  categoryId   Int?
  name         String
  description  String?
  price        Float
  isAvailable  Boolean   @default(true)
  
  chef         Chef      @relation(fields: [chefId], references: [id])
  category     Category? @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
  reviews     Review[]
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("products")
  @@index([chefId, isAvailable])
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  imageUrl   String
  isPrimary  Boolean  @default(false)
  
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())

  @@map("product_images")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique @default(uuid())
  userId          Int
  chefId          Int
  status          OrderStatus   @default(PENDING)
  
  totalAmount     Float
  subtotal        Float
  deliveryFee     Float
  deliveryAddress String
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  
  user            User          @relation(fields: [userId], references: [id])
  chef            Chef          @relation(fields: [chefId], references: [id])
  items           OrderItem[]
  delivery        Delivery?
  reviews     Review[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("orders")
  @@index([userId, status])
  @@index([chefId, status])
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int     @default(1)
  unitPrice  Float
  totalPrice Float
  
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())

  @@map("order_items")
}

model Delivery {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  status      DeliveryStatus @default(PENDING)
  estimatedTime DateTime?
  
  order       Order         @relation(fields: [orderId], references: [id])

  @@map("deliveries")
}

model Promotion {
  id            Int           @id @default(autoincrement())
  chefId        Int
  title         String
  discountType  DiscountType
  discountValue Float?
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean       @default(true)
  
  chef          Chef          @relation(fields: [chefId], references: [id])
  createdAt     DateTime      @default(now())

  @@map("promotions")
}

model Review {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  userId    Int
  chefId    Int
  rating    Int
  comment   String?
  isApproved Boolean @default(true)
  productId Int? 
  
  order     Order    @relation(fields: [orderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  chef      Chef     @relation(fields: [chefId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@map("reviews")
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_sessions")
}

// ==================== ОБЯЗАТЕЛЬНЫЕ ENUMS ====================

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  CASH
  ONLINE
}

enum DiscountType {
  PERCENTAGE
  FIXED
  FREE_DELIVERY
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  ON_THE_WAY
  DELIVERED
  FAILED
}